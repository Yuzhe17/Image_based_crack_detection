from tensorflow.keras import Model
imageReader = ImageReader(IMAGE_H,IMAGE_W=IMAGE_W, norm=lambda image : image / 255.)
out = imageReader.fit(r'../input/training-imgs/20160222_081111.jpg')
print(out.shape)
X_test = np.expand_dims(out,0)
print(X_test.shape)
# handle the hack input
dummy_array = np.zeros((1,1,1,1,TRUE_BOX_BUFFER,4))
model=Model.load_weights('./model.ckpt')
y_pred = model.predict([X_test,dummy_array])
print(y_pred.shape)

class OutputRescaler(object):
    def __init__(self,ANCHORS):
        self.ANCHORS = ANCHORS

    def _sigmoid(self, x):
        return 1. / (1. + np.exp(-x))
    def _softmax(self, x, axis=-1, t=-100.):
        x = x - np.max(x)

        if np.min(x) < t:
            x = x/np.min(x)*t

        e_x = np.exp(x)
        return e_x / e_x.sum(axis, keepdims=True)
    def get_shifting_matrix(self,netout):
        
        GRID_H, GRID_W, BOX = netout.shape[:3]
        no = netout[...,0]
        
        ANCHORSw = self.ANCHORS[::2]
        ANCHORSh = self.ANCHORS[1::2]
       
        mat_GRID_W = np.zeros_like(no)
        for igrid_w in range(GRID_W):
            mat_GRID_W[:,igrid_w,:] = igrid_w

        mat_GRID_H = np.zeros_like(no)
        for igrid_h in range(GRID_H):
            mat_GRID_H[igrid_h,:,:] = igrid_h

        mat_ANCHOR_W = np.zeros_like(no)
        for ianchor in range(BOX):    
            mat_ANCHOR_W[:,:,ianchor] = ANCHORSw[ianchor]

        mat_ANCHOR_H = np.zeros_like(no) 
        for ianchor in range(BOX):    
            mat_ANCHOR_H[:,:,ianchor] = ANCHORSh[ianchor]
        return(mat_GRID_W,mat_GRID_H,mat_ANCHOR_W,mat_ANCHOR_H)

    def fit(self, netout):    
        '''
        netout  : np.array of shape (N grid h, N grid w, N anchor, 4 + 1 + N class)
        
        a single image output of model.predict()
        '''
        GRID_H, GRID_W, BOX = netout.shape[:3]
        
        (mat_GRID_W,
         mat_GRID_H,
         mat_ANCHOR_W,
         mat_ANCHOR_H) = self.get_shifting_matrix(netout)


        # bounding box parameters
        netout[..., 0]   = (self._sigmoid(netout[..., 0]) + mat_GRID_W)/GRID_W # x      unit: range between 0 and 1
        netout[..., 1]   = (self._sigmoid(netout[..., 1]) + mat_GRID_H)/GRID_H # y      unit: range between 0 and 1
        netout[..., 2]   = (np.exp(netout[..., 2]) * mat_ANCHOR_W)/GRID_W      # width  unit: range between 0 and 1
        netout[..., 3]   = (np.exp(netout[..., 3]) * mat_ANCHOR_H)/GRID_H      # height unit: range between 0 and 1
        # rescale the confidence to range 0 and 1 
        netout[..., 4]   = self._sigmoid(netout[..., 4])
        expand_conf      = np.expand_dims(netout[...,4],-1) # (N grid h , N grid w, N anchor , 1)
        # rescale the class probability to range between 0 and 1
        # Pr(object class = k) = Pr(object exists) * Pr(object class = k |object exists)
        #                      = Conf * P^c
        #netout[..., 5:]  = expand_conf * self._softmax(netout[..., 5:])
        # ignore the class probability if it is less than obj_threshold 
    
        return(netout)

netout         = y_pred[0]
outputRescaler = OutputRescaler(ANCHORS=ANCHORS)
netout_scale   = outputRescaler.fit(netout)

def find_high_class_probability_bbox(netout_scale, obj_threshold):
    '''
    == Input == 
    netout : y_pred[i] np.array of shape (GRID_H, GRID_W, BOX, 4 + 1 + N class)
    
             x, w must be a unit of image width
             y, h must be a unit of image height
             c must be in between 0 and 1
             p^c must be in between 0 and 1
    == Output ==
    
    boxes  : list containing bounding box with Pr(object is in class C) > 0 for at least in one class C 
    
             
    '''
    GRID_H, GRID_W, BOX = netout_scale.shape[:3]
    
    boxes = []
    for row in range(GRID_H):
        for col in range(GRID_W):
            for b in range(BOX):
                # from 4th element onwards are confidence and class classes
                #classes = netout_scale[row,col,b,5:]
                
                #if np.sum(classes) > 0:
                    # first 4 elements are x, y, w, and h
                x, y, w, h = netout_scale[row,col,b,:4]
                confidence = netout_scale[row,col,b,4]
                box = BoundBox(x-w/2, y-h/2, x+w/2, y+h/2, confidence)
                if confidence > obj_threshold:
                    boxes.append(box)
                    
                    #if box.get_score() > obj_threshold:
                    #    boxes.append(box)
    return(boxes)
obj_threshold = 0.03
boxes = find_high_class_probability_bbox(netout_scale,obj_threshold)
print("\nobj_threshold={}".format(obj_threshold))
print("In total, YOLO can produce GRID_H * GRID_W * BOX = {} bounding boxes ".format( GRID_H * GRID_W * BOX))
print("I found {} bounding boxes with top class probability > {}".format(len(boxes),obj_threshold))

import cv2, copy
import seaborn as sns
import matplotlib.pyplot as plt
def draw_boxes(image, boxes, conf, obj_baseline=0.1,verbose=False):
    '''
    image : np.array of shape (N height, N width, 3)
    '''
    def adjust_minmax(c,_max):
        if c < 0:
            c = 0   
        if c > _max:
            c = _max
        return c
    
    image = copy.deepcopy(image)
    image_h, image_w, _ = image.shape
    score_rescaled  = np.array(conf)
    score_rescaled /= obj_baseline
    
    colors = sns.color_palette("husl", 8)
    for sr,box,color in zip(score_rescaled, boxes, colors):
        xmin = adjust_minmax(int(box[1]*image_w),int(image_w))
        ymin = adjust_minmax(int(box[0]*image_h),int(image_h))
        xmax = adjust_minmax(int(box[3]*image_w),int(image_w))
        ymax = adjust_minmax(int(box[2]*image_h),int(image_h))
 
        
        #text = "{:10} {:4.3f}".format(labels[box.label], box.get_score())
        if verbose:
            print("xmin={:4.0f},ymin={:4.0f},xmax={:4.0f},ymax={:4.0f}".format(xmin,ymin,xmax,ymax))
        image=cv2.rectangle(image,(int(xmin), int(ymin)),(int(xmax), int(ymax)),color,2)
#         cv2.putText(img       = image, 
#                     text      = text, 
#                     org       = (xmin+ 13, ymin + 13),
#                     fontFace  = cv2.FONT_HERSHEY_SIMPLEX,
#                     fontScale = 1e-3 * image_h,
#                     color     = (1, 0, 1),
#                     thickness = 1)
        
    return image

# draw_boxes(X_test[0],boxes_tiny_threshold,conf,verbose=True)
# print("Plot with low object threshold")
ima = draw_boxes(X_test[0],boxes_tiny_threshold,conf,verbose=True)
figsize = (15,15)
plt.figure(figsize=figsize)
plt.imshow(ima); 
plt.title("Plot with low object threshold")
plt.show()

# print("Plot with high object threshold")
# ima = draw_boxes(X_test[0],boxes,verbose=True)
# figsize = (15,15)
# plt.figure(figsize=figsize)
# plt.imshow(ima); 
# plt.title("Plot with high object threshold")
# plt.show()
